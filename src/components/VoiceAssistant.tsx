import React, { useState, useRef, useEffect, useCallback } from 'react';
import { useVoiceRecording } from '../hooks/useVoiceRecording';
import { useToast } from '../hooks/useToast';
import { Mic, MicOff, Volume2, VolumeX, Send, Sparkles, FileText } from 'lucide-react';
import SmartActivityForm from './SmartActivityForm';
import ApiService, { SalesActivity } from '../services/apiService';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  isVoice?: boolean;
  transcription?: string;
  audioUrl?: string;
  hasActivitySuggestion?: boolean;
}

const VoiceAssistant: React.FC = () => {
  const { success, error: showError } = useToast();
  const [messages, setMessages] = useState<Message[]>([]);
  const [, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [textInput, setTextInput] = useState('');
  const [showActivityForm, setShowActivityForm] = useState(false);
  const [currentTranscription, setCurrentTranscription] = useState('');
  const [currentAudioUrl, setCurrentAudioUrl] = useState<string>();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const {
    isRecording,
    transcription,
    audioUrl,
    startRecording,
    stopRecording,
    clearRecording,
    isProcessing,
    apiStatus
  } = useVoiceRecording();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleUserMessage = useCallback(async (content: string, isVoice = false, audioUrl?: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date(),
      isVoice,
      transcription: isVoice ? content : undefined,
      audioUrl: audioUrl
    };

    setMessages(prev => [...prev, userMessage]);
    
    // Generate AI response with activity suggestion for voice messages
    setTimeout(() => {
      const hasActivitySuggestion = isVoice && content.length > 50; // Suggest activity for substantial voice messages
      const aiResponse = generateAIResponse(content, hasActivitySuggestion);
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: aiResponse,
        timestamp: new Date(),
        hasActivitySuggestion,
        transcription: isVoice ? content : undefined,
        audioUrl: audioUrl
      };
      setMessages(prev => [...prev, assistantMessage]);
    }, 1000);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (transcription && !isProcessing) {
      handleUserMessage(transcription, true, audioUrl || undefined);
      clearRecording();
    }
  }, [transcription, isProcessing, audioUrl, clearRecording, handleUserMessage]);

  const generateAIResponse = (userInput: string, hasActivitySuggestion = false): string => {
    if (hasActivitySuggestion) {
      const activityResponses = [
        `ü•¶ ‡∏â‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡∏±‡∏Å! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏´‡∏°?`,
        `ü•ï ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏â‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≤‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?`,
        `üåΩ ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏´‡∏°?`,
        `ü•¨ ‡∏â‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞!`,
      ];
      return activityResponses[Math.floor(Math.random() * activityResponses.length)];
    }
    
    const generalResponses = [
      `ü•¶ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∞! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡∏™‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏î‡∏µ?`,
      `ü•ï ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?`,
      `üåΩ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠?`,
      `ü´ë ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡∏±‡∏Å‡∏™‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∞!`,
    ];
    return generalResponses[Math.floor(Math.random() * generalResponses.length)];
  };

  const handleVoiceToggle = async () => {
    if (isRecording) {
      stopRecording();
      setIsListening(false);
    } else {
      await startRecording();
      setIsListening(true);
    }
  };

  const handleTextSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (textInput.trim()) {
      handleUserMessage(textInput);
      setTextInput('');
    }
  };

  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      setIsSpeaking(true);
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.onend = () => setIsSpeaking(false);
      speechSynthesis.speak(utterance);
    }
  };

  const handleCreateActivity = (message: Message) => {
    if (message.transcription) {
      setCurrentTranscription(message.transcription);
      setCurrentAudioUrl(message.audioUrl);
      setShowActivityForm(true);
    }
  };

  const handleActivitySubmit = async (activityData: Partial<SalesActivity>) => {
    try {
      const response = await ApiService.createActivity(activityData);
      if (response.success) {
        success('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        setShowActivityForm(false);
        setCurrentTranscription('');
        setCurrentAudioUrl(undefined);
        
        // Add confirmation message
        const confirmationMessage: Message = {
          id: Date.now().toString(),
          type: 'assistant',
          content: `ü•¶ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏â‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ "${activityData.title}" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô "${activityData.customerName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡πâ‡∏ß! ü•ï`,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, confirmationMessage]);
      } else {
        throw new Error('Failed to create activity');
      }
    } catch (error) {
      console.error('Error creating activity:', error);
      showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
    }
  };

  const handleActivityCancel = () => {
    setShowActivityForm(false);
    setCurrentTranscription('');
    setCurrentAudioUrl(undefined);
  };

  return (
    <div className="fixed bottom-4 right-4 w-96 h-[500px] bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl shadow-2xl border-2 border-green-300 flex flex-col overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-green-600 to-emerald-600 p-4 text-white">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center animate-bounce">
            <span className="text-2xl">ü•¶</span>
          </div>
          <div>
            <h3 className="font-semibold text-lg">ü•ï AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≤‡∏¢‡∏ú‡∏±‡∏Å</h3>
            <p className="text-white/80 text-sm">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á</p>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 p-4 overflow-y-auto space-y-4">
        {messages.length === 0 ? (
          <div className="text-center text-gray-500 py-8">
            <div className="text-6xl mx-auto mb-4 animate-pulse">üåΩ</div>
            <p className="text-sm text-green-600">ü•¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≤‡∏¢‡∏ú‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            <p className="text-xs mt-2 text-green-500">‡∏•‡∏≠‡∏á: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô ABC"</p>
          </div>
        ) : (
          messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] p-3 rounded-lg shadow-md ${
                  message.type === 'user'
                    ? 'bg-gradient-to-r from-green-600 to-emerald-600 text-white'
                    : 'bg-gradient-to-r from-lime-100 to-green-100 text-green-800 border border-green-200'
                }`}
              >
                {message.isVoice && (
                  <div className="flex items-center space-x-1 mb-1">
                    <Mic className="w-3 h-3" />
                    <span className="text-xs opacity-75">Voice message</span>
                  </div>
                )}
                <p className="text-sm">{message.content}</p>
                {message.type === 'assistant' && (
                  <div className="flex items-center space-x-2 mt-2">
                    <button
                      onClick={() => speakText(message.content)}
                      className="p-1 hover:bg-green-100 rounded transition-colors"
                      disabled={isSpeaking}
                    >
                      {isSpeaking ? (
                        <VolumeX className="w-4 h-4" />
                      ) : (
                        <Volume2 className="w-4 h-4" />
                      )}
                    </button>
                    {message.hasActivitySuggestion && message.transcription && (
                      <button
                        onClick={() => handleCreateActivity(message)}
                        className="flex items-center space-x-1 px-2 py-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white text-xs rounded hover:from-green-600 hover:to-emerald-600 transition-all transform hover:scale-105"
                      >
                        <span className="text-sm">ü•¨</span>
                        <span>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="p-4 border-t-2 border-green-200 bg-gradient-to-t from-green-50 to-transparent">
        {/* Voice Status */}
        {(isRecording || isProcessing) && (
          <div className="mb-3 p-2 bg-gradient-to-r from-green-100 to-lime-100 rounded-lg text-center border border-green-200">
            <div className="flex items-center justify-center space-x-2">
              <div className={`text-lg ${isRecording ? 'animate-bounce' : 'animate-spin'}`}>
                {isRecording ? 'üåΩ' : 'ü•¶'}
              </div>
              <span className="text-sm text-green-700 font-medium">
                {isRecording ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á...' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...'}
              </span>
            </div>
          </div>
        )}

        {/* Input Form */}
        <form onSubmit={handleTextSubmit} className="flex space-x-2">
          <input
            type="text"
            value={textInput}
            onChange={(e) => setTextInput(e.target.value)}
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å..."
            className="flex-1 px-3 py-2 border-2 border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 bg-white"
            disabled={isRecording || isProcessing}
          />
          
          {/* Voice Button */}
          <button
            type="button"
            onClick={handleVoiceToggle}
            className={`p-2 rounded-lg transition-all transform hover:scale-110 ${
              isRecording
                ? 'bg-gradient-to-r from-red-500 to-orange-500 text-white animate-pulse'
                : 'bg-gradient-to-r from-green-600 to-emerald-600 text-white hover:from-green-700 hover:to-emerald-700'
            }`}
            disabled={isProcessing}
          >
            {isRecording ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
          </button>
          
          {/* Send Button */}
          <button
            type="submit"
            className="p-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all transform hover:scale-110"
            disabled={!textInput.trim() || isRecording || isProcessing}
          >
            <Send className="w-5 h-5" />
          </button>
        </form>
        
        {/* API Status */}
        <div className="mt-2 text-xs text-center">
          <span className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full ${
            apiStatus === 'success' ? 'bg-green-100 text-green-700' :
            apiStatus === 'fallback' ? 'bg-yellow-100 text-yellow-700' :
            apiStatus === 'error' ? 'bg-red-100 text-red-700' :
            'bg-gray-100 text-gray-600'
          }`}>
            <div className={`w-1.5 h-1.5 rounded-full ${
              apiStatus === 'success' ? 'bg-green-500' :
              apiStatus === 'fallback' ? 'bg-yellow-500' :
              apiStatus === 'error' ? 'bg-red-500' :
              'bg-gray-400'
            }`} />
            <span>
              {apiStatus === 'success' ? 'ü•¶ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' :
               apiStatus === 'fallback' ? 'üåΩ ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå' :
               apiStatus === 'error' ? 'ü•ï ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' :
               'üå± ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
            </span>
          </span>
        </div>
      </div>
      
      {/* Smart Activity Form Modal */}
      <SmartActivityForm
        isOpen={showActivityForm}
        transcription={currentTranscription}
        audioUrl={currentAudioUrl}
        onSubmit={handleActivitySubmit}
        onCancel={handleActivityCancel}
      />
    </div>
  );
};

export default VoiceAssistant; 